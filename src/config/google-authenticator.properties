#######################################################################################
#	This file is used to configure the behavior of the GoogleAuthenticator class. Each
#	value has a description of it's purpose. Some characters need to be escaped
#	in configuration files. Escape characters by preceding them with a backslash (\).
#	Here are the characters:
#	Char		Escape Sequence
#	(space)		backslash followed by space (\ )
#	=			\=
#	:			\:
#	;			\;
#	tab			\t
#	newline		\n
#	
#######################################################################################
# 	The following lines configure basic functions and properties about the 
#	the authenticator class.
#######################################################################################
#
#	Name:	GoogleAuthenticator.enableLogging
#
#	This flag indicates whether details should be recorded in the Kinetic Request log.
#
#	Example: 
#	GoogleAuthenticator.enableLogging=T
#
GoogleAuthenticator.enableLogging=T
#
#	Name:	GoogleAuthenticator.lookupARS
#
#	This flag indicates whether the Login ID will be retrieved from Remedy. If it is
#	set to F, it will simply pass the results of the parseScript function as the 
#	Login Name.  If set to T, it will lookup the Remedy Login Name based on the 
#   GoogleAuthenticator.source properties.
#
#	Example: 
#	GoogleAuthenticator.lookupARS=F
#
GoogleAuthenticator.lookupARS=T

#######################################################################################
# 	The following parameters configure the properties used to lookup the Login Name 
#   from the Remedy system. These are only used if the lookupARS value is set to "T". 
#######################################################################################
#
#	Name:	GoogleAuthenticator.source.form
#
#	This is the Remedy form that contains the lookup and result fields.
#
#	Example: 
#	GoogleAuthenticator.source.form=User
#
GoogleAuthenticator.source.form=User
#
#	Name:	GoogleAuthenticator.source.lookupField
#
#	This is the field that is used as the criteria for the lookup. The value of the
#	comparison will be the result of the parseScript function above. Assuming that
#	the field is "Login Name" and the value is "John.Doe", the criteria will be 
#	"Login Name" = 'John.Doe'.
#
#	Example: 
#	GoogleAuthenticator.source.lookupField=Login\ Name
#
GoogleAuthenticator.source.lookupField=Email\ Address
#
#	Name:	GoogleAuthenticator.source.returnField
#
#	This must be the Field ID of the field that is returned from the lookup.  The value of this 
#   field is submitted as the user ID to the AREA dll on the AR Server.
#
#	Example: 
#	GoogleAuthenticator.source.returnField=101
GoogleAuthenticator.source.returnField=101
#######################################################################################
# 	The following parameters define routes when the user logs out of the application, or
#   the login page to direct the user in the case the user does not be found in the
#   Remedy sysetm.
#######################################################################################
#
#	Name:	GoogleAuthenticator.route.authenticationURL
#
#	This is the URL that the user will be redirected if the User can not be determined from the
#   PKI certificate, or if the user does not exist in the Remedy system.
#
#	Example: 
#	GoogleAuthenticator.route.authenticationURL=/login.jsp
#
GoogleAuthenticator.route.authenticationURL=/login.jsp
#
#	Name:	GoogleAuthenticator.route.logoutURL
#
#	This is the URL that the user will be redirected if the User logs out of the application.  If
#   blank, the user will be redirected to the same page that they logged out from.
#
#	Example: 
#	GoogleAuthenticator.route.logoutURL=http://go.somewhere
#
GoogleAuthenticator.route.logoutURL=

#
# Setup a Google account which will be dedicated to providing API access calls.
# This should not be an individuals Google Account.
#
# Once a dedicated Google account has been setup for API calls, follow these steps:
# 
# 1)  While logged in as the google API account, go to this URL: https://console.developers.google.com/
# 2)  Create a new project and name it something similar to your Kinetic Request portal implentation name.
# 3)  On the left side of the page, under the 'APIs & auth' header, click the APIs link
# 4)  Find Google+ Api in the list of API options (directly under the text Browse APIs there is a filter text box)
# 5)  Enable the Google+ API by clicking on the 'OFF' button, read through the TOS carefully like you would any TOS, and then blindly agree.
# 6)  Now go to the 'Credentials' link just below the 'API' link found in step 3.
# 7)  Click the blue 'Create new Client ID' button.
# 8)  Configure the new Client ID: 
#     a) Choose Web Application as the application type
#     b) Leave the 'Authorized Javascript Origins' blank, it won't be used by this SSO plugin.
#     c) For 'Authorized Redirect URIS' put in the URL to the oauthCallback.jsp file.
#        This is the same value that you set for GoogleAuthenticator.ssoCallbackUrl.
#        e.g. https://catalog.kineticdata.com/kinetic/oauthCallback.jsp
#
# 9)  Click the blue button 'Create Client ID' to finish the setup process.
# 10) Configure the values below - apiKey, apiSecret, ssoCallbackUrl.
#     a) GoogleAuthenticator.apiKey should equal the CLIENT ID value. It looks something like ##gibberish##.apps.googleusercontent.com
#     b) GoogleAuthenticator.apiKey should equal the CLIENT SECRET value. It just looks like roughly 24 characters of gibberish.
#     c) GoogleAuthenticator.ssoCallbackUrl should equal what you set for step 8.c. For example https://catalog.kineticdata.com/kinetic/oauthCallback.jsp
#
# 11) Save this properties file.
# 12) Be sure to store this properties file in a secured location on the web servers filesystem.
#
GoogleAuthenticator.apiKey=
GoogleAuthenticator.apiSecret=
GoogleAuthenticator.ssoCallbackUrl=